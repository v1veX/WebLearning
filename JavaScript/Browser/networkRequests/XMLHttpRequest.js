// Работает в двух режимах: асинхронном и синхронном

// АСИНХРОННЫЙ

// 1
let xhr = new XMLHttpRequest(); // у конструктора нет аргументов

// 2
xhr.open(method, URL, [async, user, password]);  // инициализация запроса
/*
method – HTTP-метод. Обычно это "GET" или "POST".
URL – URL, куда отправляется запрос: строка, может быть и объект URL.
async – если указать false, тогда запрос будет выполнен синхронно.
user, password – логин и пароль для базовой HTTP-авторизации (если требуется)
*/

// 3
xhr.send([body]);  // отпрака запроса
// Необязательный параметр body содержит тело запроса.

// 4
// Слушаем события на xhr, чтобы получить ответ.
/*
load – происходит, когда получен какой-либо ответ, включая ответы с HTTP-ошибкой, например 404.
error – когда запрос не может быть выполнен, например, нет соединения или невалидный URL.
progress – происходит периодически во время загрузки ответа, сообщает о прогрессе.
*/

xhr.onload = function() {
    // xhr.status - Код состояния HTTP (число). Может быть 0 в случае, если ошибка не связана с HTTP.
    // xhr.statusText - Сообщение о состоянии ответа HTTP (строка): обычно OK для 200, Not Found для 404, Forbidden для 403, и так далее.
    // xhr.response - Тело ответа сервера.
    alert(`Загружено: ${xhr.status} ${xhr.response}`);
};
  
xhr.onerror = function() { // происходит, только когда запрос совсем не получилось выполнить
    alert(`Ошибка соединения`);
};

xhr.onprogress = function(event) { // запускается периодически
    // event.loaded - количество загруженных байт
    // event.lengthComputable = равно true, если сервер присылает заголовок Content-Length
    // event.total - количество байт всего (только если lengthComputable равно true)
    alert(`Загружено ${event.loaded} из ${event.total}`);
};

xhr.timeout = 10000; // можно уствновить время ожидания ответа в мс

// Используя xhr.responseType можно установить требуемый тип ответа
/*
"" (по умолчанию) – строка,
"text" – строка,
"arraybuffer" – ArrayBuffer (для бинарных данных, смотрите в ArrayBuffer, бинарные массивы),
"blob" – Blob (для бинарных данных, смотрите в Blob),
"document" – XML-документ (может использовать XPath и другие XML-методы),
"json" – JSON (парсится автоматически)
*/

xhr.abort(); // прервать запрос


// СИНХРОННЫЕ

/*
Если в методе open третий параметр async установлен на false, запрос выполняется синхронно.

Другими словами, выполнение JavaScript останавливается на send() и возобновляется после получения ответа. Так ведут себя, например, функции alert или prompt.
*/
/*
В некоторых браузерах нельзя прокручивать страницу, пока идёт синхронный запрос. Ну а если же синхронный запрос по какой-то причине выполняется слишком долго, браузер предложит закрыть «зависшую» страницу.
*/
// Также в них нет никаких таймаутов и отслеживания прогресса


// работа с заголовками
/*
setRequestHeader(name, value) - Устанавливает заголовок запроса с именем name и значением value. Отменить нельзя
getResponseHeader(name) - Возвращает значение заголовка ответа name (кроме Set-Cookie и Set-Cookie2)
getAllResponseHeaders() - Возвращает все заголовки ответа, кроме Set-Cookie и Set-Cookie2
*/


// POST-запросы

// Просто меняем метод на 'POST' и все, главное не забыть указать правильные заголовки для json


// Если нужно отследить процесс загрузки НА сервер, то отслеживаем события на xhr.upload.{event}
/*
loadstart – начало загрузки данных.
progress – генерируется периодически во время отправки на сервер.
abort – загрузка прервана.
error – ошибка, не связанная с HTTP.
load – загрузка успешно завершена.
timeout – вышло время, отведённое на загрузку (при установленном свойстве timeout).
loadend – загрузка завершена, вне зависимости от того, как – успешно или нет.
*/