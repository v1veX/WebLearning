// defer
// атрибут для тега <script>
// указывает, что браузер не должен ждать загрузки скрипта, а должен загружать его в фоне. DOM-дерево строится дальше и скрипт выполнится после его постройки
// скрипты с этим атрибутом выпонятся в том порядке, в котором они следуют в HTML


// async
// Атрибут async означает, что скрипт абсолютно независим
/*
Страница не ждёт асинхронных скриптов, содержимое обрабатывается и отображается.
Событие DOMContentLoaded и асинхронные скрипты не ждут друг друга:
    DOMContentLoaded может произойти как до асинхронного скрипта (если асинхронный скрипт завершит загрузку после того, как страница будет готова),
    …так и после асинхронного скрипта (если он короткий или уже содержится в HTTP-кеше)
Остальные скрипты не ждут async, и скрипты c async не ждут другие скрипты.
*/
// поэтому скрипты с async выполняются в порядке загрузки


// Динамически загружаемые скрипты
// Мы можем также добавить скрипт и динамически, с помощью JavaScript:
let script = document.createElement('script');
script.src = "path/to/script.js";
document.body.append(script);
// Динамически загружаемые скрипты по умолчанию ведут себя как «async»
// указав `script.async = false`, можно менять порядок выполнения с "первый загрузился - первый выполнился" на "первый по порядку - первый выполнился"

/* На практике defer используется для скриптов, которым требуется доступ ко всему DOM и/или важен их относительный порядок выполнения.

А async хорош для независимых скриптов, например счётчиков и рекламы, относительный порядок выполнения которых не играет роли. */